
services:
  
  client:
    build:
      context: ./client
    ports:
      - "5173:5173"
    networks:
      - network-back
  
  server:
    build:
      context: ./server
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: "postgres://your_user:your_password@db:5432/your_db"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    networks: [network-back]
  
  db:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: devops_db
      POSTGRES_USER: devops_user
      POSTGRES_PASSWORD: devops_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_user -d your_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network-back

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file: .env
    networks: [network-back]
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  celery:
    build: ./server
    command: celery -A my_project.celery worker --loglevel=info
    env_file: .env
    volumes:
      - ./server:/app
    depends_on:
      - server
      - rabbitmq
      - db
    networks: [network-back]

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/monitoring/prometheus
    networks: [network-back]
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build: ./proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - server
    networks:
      - network-back
  
  grafana:
    image: grafana/grafana:latest
    restart: always
    env_file: .env
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    networks: [network-back]
    depends_on:
      prometheus:
        condition: service_healthy

networks:
  network-back:
    driver: bridge
volumes:
  grafana_data:
  postgres_data:
  prometheus_data: