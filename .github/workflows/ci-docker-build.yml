name: CI - Docker Build Validation

on:
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: pr-${{ github.event.number }}

jobs:
  docker-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['client', 'server']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Validate Dockerfile
        id: dockerfile-check
        run: |
          if [ ! -f "${{ matrix.service }}/Dockerfile" ]; then
            echo "::error::Missing ${{ matrix.service }}/Dockerfile"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build image
        if: steps.dockerfile-check.outputs.status == 'success'
        run: |
          docker buildx build \
            --file ${{ matrix.service }}/Dockerfile \
            --tag ${{ env.REGISTRY }}/${{ matrix.service }}:${{ env.IMAGE_PREFIX }} \
            --progress plain \
            ${{ matrix.service }} 2>&1 | tee build.log
          
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "::error::Build failed"
            exit 1
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-logs
          path: build.log

  report:
    needs: docker-validation
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download logs
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let message = `## CI Results for PR #${{ github.event.number }}\n`;
            
            ['client', 'server'].forEach(service => {
              const logPath = `artifacts/${service}-logs/build.log`;
              message += `\n### ${service.toUpperCase()}\n`;
              
              if (fs.existsSync(logPath)) {
                const log = fs.readFileSync(logPath, 'utf8');
                if (log.includes('ERROR')) {
                  message += `❌ Build failed\n\`\`\`\n${log.slice(-500)}\n\`\`\``;
                } else {
                  message += `✅ Build succeeded\nSize: ${(log.match(/exported.*?(\d+\.?\d*)MB/) || [''])[0]}`;
                }
              } else {
                message += '⚠️ No build attempted';
              }
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });