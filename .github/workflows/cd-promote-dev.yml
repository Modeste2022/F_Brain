name: CD - Promote dev to master

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      force_promotion:
        description: 'Forcer la promotion m√™me sans changements'
        required: false
        default: 'false'
        type: boolean
      delay_seconds:
        description: 'D√©lai avant merge automatique (secondes)'
        required: false
        default: '30'
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

env:
  PROMOTION_DELAY: ${{ github.event.inputs.delay_seconds || '30' }}

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      validation-status: ${{ steps.validation-check.outputs.status }}
      commits-count: ${{ steps.diff-check.outputs.commits-ahead }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker Compose
        run: |
          if [ -f docker-compose.yml ]; then
            docker compose config --quiet || exit 1
            docker compose build --quiet || exit 1
          else
            echo "No docker-compose.yml found - skipping validation"
          fi

      - name: Check commit differences
        id: diff-check
        run: |
          git fetch origin master
          DIFF_COUNT=$(git rev-list --count origin/master..HEAD)
          echo "commits-ahead=$DIFF_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$DIFF_COUNT" -gt 0 ] || [ "${{ github.event.inputs.force_promotion }}" = "true" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify merge compatibility
        run: |
          git merge-tree $(git merge-base HEAD origin/master) HEAD origin/master | 
          grep -q '<<<<<<<' && (echo "‚ùå Merge conflicts detected"; exit 1) || echo "‚úÖ No merge conflicts"

      - name: Validation summary
        id: validation-check
        run: |
          if [ "${{ steps.diff-check.outputs.has-changes }}" = "true" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Validation passed - Ready for promotion"
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to promote"
          fi

  promote:
    needs: validate
    if: needs.validate.outputs.validation-status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Find existing PR
        id: find-pr
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head dev --base master --state open --json number -q '.[0].number // empty')
          if [ -n "$PR_NUMBER" ]; then
            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "Found existing PR #$PR_NUMBER"
          else
            echo "pr-number=" >> $GITHUB_OUTPUT
          fi

      - name: Create PR if needed
        id: create-pr
        if: steps.find-pr.outputs.pr-number == ''
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_URL=$(gh pr create \
            --head dev \
            --base master \
            --title "üöÄ Auto-promotion: dev ‚Üí master [$(date +'%Y-%m-%d')]" \
            --body "Automatic promotion from CI workflow")
          
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '/pull/[0-9]+' | cut -d'/' -f3)
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Created PR #$PR_NUMBER"

      - name: Wait for promotion delay
        run: |
          echo "‚è≥ Waiting ${{ env.PROMOTION_DELAY }} seconds before merge..."
          sleep ${{ env.PROMOTION_DELAY }}

      - name: Merge PR
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.find-pr.outputs.pr-number || steps.create-pr.outputs.pr-number }}
          
          if ! gh pr merge "$PR_NUMBER" --merge --delete-branch=false; then
            echo "::error::Failed to merge PR #$PR_NUMBER"
            gh pr comment "$PR_NUMBER" --body "‚ùå Merge failed - Please check manually"
            exit 1
          fi
          
          echo "‚úÖ Successfully merged PR #$PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body "‚úîÔ∏è Successfully merged via CD workflow"

  notify:
    needs: [validate, promote]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Workflow status
        run: |
          echo "=== CD Promotion Summary ==="
          echo "Validation: ${{ needs.validate.outputs.validation-status || 'unknown' }}"
          echo "Promotion: ${{ needs.promote.result || 'skipped' }}"
          echo "Commits: ${{ needs.validate.outputs.commits-count || '0' }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          if [[ "${{ needs.promote.result }}" == "failure" ]]; then
            echo "::error::Promotion failed"
            exit 1
          fi